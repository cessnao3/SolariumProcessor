; Define the hard-reset vector location
.loadloc start_init

; Define the soft-reset vector location
.loadloc start_init

; Start software interrupt vectors
.oper 0x2
.loadloc sw_int_0

; Start hardware interrupt vectors
.oper 0x12
.loadloc hw_int_0

; Define the location for the serial device
:dev_serial_loc
.load 0xA000

; Define interrupt instructions
.oper 0x1000
:sw_int_0
ldi 8, 30
ldi 9, 54
retint

.oper 0x1100
:hw_int_0
jmpri 2
.loadloc dev_serial_loc
ldri 13, -1
ld 13, 13

; Mark the location to read input values from
ldi 14, 1
add 14, 14, 13

; Mark the location to write serial values to
ldi 15, 3
add 15, 15, 13

:hw_int_0_main_loop
ld 6, 13
tz 6
jmpri hw_int_0_end

ld 7, 14
sav 15, 7

jmpri hw_int_0_main_loop

:hw_int_0_end
retint

.oper 0x2000
:func_print_str

jmpri 2
.loadloc dev_serial_loc
ldri 13, -1
ld 13, 13

; Mark the location to write serial values to
ldi 15, 3
add 15, 15, 13

; Load the argument value
arg 6, 0

:func_print_str_loop
ld 7, 6
ldi 8, 1
tz 7
jmpri func_print_str_end
sav 15, 7
add 6, 8, 6
jmpri func_print_str_loop

:func_print_str_end
ldi 7, 10
sav 15, 7
ret

; Define the text string to load
:input_prompt_text_str_0
.loadtext "Hello, world!"

:input_prompt_text_str_1
.loadtext "Enter text and IRQ to enable echoing"

; Define the starting location
.oper 0x4000
:start_init
ldn $spb
.load 0x400

; Disable interrupts while the init text is printing
intoff

; Load the input text and write the resulting values
jmpri 2
.loadloc func_print_str
ldri 6, -1

jmpri 2
.loadloc input_prompt_text_str_0
ldri 7, -1

jmpri 2
.loadloc input_prompt_text_str_1
ldri 8, -1

push 7
call 6
pop

push 8
call 6
pop

; Re-enable interrupts
inton

:start

; Setup the counter variables
ldi 6, 1
ldi 3, 0
ldi 15, 100
int 0

; Setup the target value
jmpri load_data

:target_value
.load 32767 ; 0x7FFF

:load_data
ldri 4, target_value

; Perform the addition and check for reaching the target
:loop
add 3, 6, 3
int 0
sub 5, 4, 3

; Jump back to the add instruction if the
; target minus current is greater than zero
tnz 5
jmpri loop
jmpri endloc

; Otherwise, enter an infinite loop as program completion
:endloc
jmpri 2
.loadloc start
ldri 4, -1
jmp 4
