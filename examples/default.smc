; Define the hard-reset vector location
.loadloc start

; Define the soft-reset vector location
.loadloc start

; Start software interrupt vectors
.oper 0x2
.loadloc sw_int_0

; Start hardware interrupt vectors
.oper 0x12
.loadloc hw_int_0

; Define interrupt instructions
.oper 0x1000
:sw_int_0
ldi 8, 30
ldi 9, 54
retint

.oper 0x1100
:hw_int_0
.load 0xA000
ldir 13, -1

; Mark the location to read input values from
ldi 14, 1
add 14, 14, 13

; Mark the location to write serial values from
ldi 15, 3
add 15, 15, 13

:hw_int_0_main_loop
ld 6, 13
tz 6
jmpri hw_int_0_end

ld 7, 14
sav 15, 7

jmpri hw_int_0_main_loop

:hw_int_0_end
retint

.oper 0x2000
:functest
ldi $ret, 97
ret

; Define the starting location
.oper 0x4000
:start

; Setup the counter variables
ldi 6, 1
ldi 3, 0
ldi 15, 100
int 0

; Setup the target value
jmpri load_data

:target_value
.load 32767 ; 0x7FFF

:load_data
ldir 4, target_value

; Load the function call test
ldir 15, 2
jmpri 2
.loadloc functest
call 15
copy $ret, 12

; Perform the addition and check for reaching the target
:loop
add 3, 6, 3
int 0
sub 5, 4, 3

; Jump back to the add instruction if the
; target minus current is greater than zero
tgz 5
jmpri loop
jmpri endloc

; Otherwise, enter an infinite loop as program completion
:endloc
reset
