global a: u16 = 255 + 5;
global b: u32;
global c: u32 = (-1) : u32;
global d: i16 = 0 - 1 + a;
global e: i8 = 127;
global f: i8 = -128;
const Z: i8 = 10;
global q: i8 = Z;
global z: u8 = Z;
global func_test: fn()void;
global TEST_STR: *u8 = "Hello, world!";
global ptr_test: u32 = 0;
global ex_ptr: *u32 = 0x3000;
global SERIAL_OUT_LOC: *u8 = 0xA000u32 + 5;

struct TEST {
    a: u16;
    b: u32;
}

global Q: TEST;

struct Node {
    a: *Node;
    b: *Node;
    v: u32;
}

fn add_numbers(dest: *u16, a: u16, b: u16) u16 {
    *dest = 4 * a + b * 2;
}

fn print(c: *u8) void {
    while (*c != 0) {
        *SERIAL_OUT_LOC = *c;
        c = c + 1;
    }
}

fn print_digit(v: u8) void {
    if (v < 10) {
        *SERIAL_OUT_LOC = '0' + v;
    } else {
        *SERIAL_OUT_LOC = '!';
    }
}

fn print_uint(v: u32) void {
    def chars: [12]u8;
    def cp: *u8 = &chars;
    if (v == 0) {
        print_digit(0);
    } else {
        while (v != 0) {
            *cp = v % 10;
            v = v / 10;
            cp = cp + 1;
        }
        while (cp != &chars) {
            cp = cp - 1;
            print_digit(*cp);
        }
    }
}

fn strlen(c: *u8) u32 {
    def len: u32 = 0u32;
    while (*c != 0) {
        len = len + 1u32;
        c = c + 1u8;
    }
    return len;
}

struct LenStruct {
    len: u32;
    val: u32;
}

fn strlens(c: *u8) LenStruct {
    def s: LenStruct;
    s.len = 0;
    s.val = 0;
    while (*c != 0) {
        s.len = s.len + 1;
        s.val = s.len;
        c = c + 1;
    }
    return s;
}

fn test_fn(a: u16, b: u32) void {
    b = 7;
}

fn main() void {
    print_uint(strlen(TEST_STR));
    print("\n");
    print_uint(strlens(TEST_STR).len);
    print("\n");

    def s1: u32 = strlen(TEST_STR);
    def s2: LenStruct = strlens(TEST_STR);

    print_uint(s1);
    print("\n");
    print_uint(s2.len);
    print("\n");

    print_uint(0);
    print("\n");
    print_uint(1);
    print("\n");
    print_uint(1234);
    print("\n");
    print(TEST_STR);
    print("\n");
    const X: i16 = 3;
    def a: u16 = 32;
    {
        def bloc: u32 = a;
    }

    def ex_ptr2: **u32 = &ex_ptr;
    def ex_val: u32 = **ex_ptr2;

    ex_ptr = ex_ptr + 1;

    while (a != 0) {
        a = a - 1;
    }

    if (a == 0) {
        c = 7i16 : i16;
    } else {
        c = 9;
    }

    *ex_ptr = 0x4387 : u8;

    def q: *TEST;
    q = &Q;

    Q.a = 3;
    Q.b = 65535;
    (*q).a = 5;

    test_fn(1, 2);

    def q2: TEST = Q;
    Q.a = 4;

    add_numbers(&b, 10, q2.a);

    q2 = Q;
    add_numbers(&c, 10, q2.a);

    def ptr_local: *u16 = &ptr_test;
    *ptr_local = 1;
    *(ptr_local + 1) = 2;

    def nt: Node;
    nt.a = &nt;
    nt.b = &nt;
    nt.v = 7;

    print_uint((*(nt.a)).v);
}
